// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// esta es el datasource para db
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User_Role {
  id Int @default(autoincrement()) @id
  role_name String

  // relations
  users User[] @relation("UserRole")
}

model User {
  id Int @default(autoincrement()) @id
  username String @unique
  first_name String
  last_name String
  email String @unique
  password String

  // relations
  userRole User_Role @relation("UserRole", fields: [user_role_id], references: [id])
  user_role_id Int 

  professionalAppointments Appointment[] @relation("ProfessionalAppointment")

  clientAppointments Appointment[] @relation("ClientAppointment") 

  tokens TokenBlacklist[] @relation("UserToken")

  schedule ProfessionalSchedule[] @relation("ProfessionalSchedule")

  hours ProfessionalHour[] @relation("ProfessionalHour")

  // tablename
  @@map("users")
}

model ProfessionalHour {
  id Int @default(autoincrement()) @id
  hour_begin DateTime
  hour_end DateTime
  
  // relations
  professional User @relation("ProfessionalHour", fields: [professional_id], references: [id])
  professional_id Int

  dayOfTheWeeek WeekDay @relation("HourDayOfTheWeek", fields: [day_of_the_week_id], references: [id])
  day_of_the_week_id Int


  appointment Appointment[] @relation("Hour")

  // tablename
  @@map("hours")  

}

model YearDay {
  id Int @default(autoincrement()) @id
  day DateTime

  // relations
  appointments Appointment[] @relation("YearDay")

  // tablename
  @@map("year_days")

}

model Appointment {
  id Int @default(autoincrement()) @id
  
  // relations
  client User @relation("ProfessionalAppointment" ,fields: [client_id], references: [id])
  client_id Int

  professional User @relation("ClientAppointment" ,fields: [professional_id], references: [id])
  professional_id Int

  yearDay YearDay @relation("YearDay", fields: [year_day_id], references: [id])
  year_day_id Int

  hour ProfessionalHour @relation("Hour", fields: [hour_id], references: [id])
  hour_id Int

}

model TokenBlacklist {
  id Int @default(autoincrement()) @id
  token String
  expiry_date DateTime
  user User @relation("UserToken", fields: [user_id], references: [id])
  user_id Int

  @@map("tokens_blacklist")
}

model ProfessionalSchedule {

  id Int @default(autoincrement()) @id
  start_time DateTime
  end_time DateTime
  break_time_start DateTime
  break_time_stop DateTime


  professional User @relation("ProfessionalSchedule", fields: [professional_id], references: [id])
  professional_id Int

  weekDay WeekDay @relation("WeekDayProfessional", fields: [day_of_the_week_id], references: [id])
  day_of_the_week_id Int

  @@map("professional_work_days")
}

model WeekDay {
  id Int @default(autoincrement()) @id
  day_name String

  professionalSchedule ProfessionalSchedule[] @relation("WeekDayProfessional")

  professionalHour ProfessionalHour[] @relation("HourDayOfTheWeek")

  @@map("week_days")
}